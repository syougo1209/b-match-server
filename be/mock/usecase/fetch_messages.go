// Code generated by MockGen. DO NOT EDIT.
// Source: fetch_messages.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/syougo1209/b-match-server/domain/model"
)

// MockFetchMessages is a mock of FetchMessages interface.
type MockFetchMessages struct {
	ctrl     *gomock.Controller
	recorder *MockFetchMessagesMockRecorder
}

// MockFetchMessagesMockRecorder is the mock recorder for MockFetchMessages.
type MockFetchMessagesMockRecorder struct {
	mock *MockFetchMessages
}

// NewMockFetchMessages creates a new mock instance.
func NewMockFetchMessages(ctrl *gomock.Controller) *MockFetchMessages {
	mock := &MockFetchMessages{ctrl: ctrl}
	mock.recorder = &MockFetchMessagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchMessages) EXPECT() *MockFetchMessagesMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockFetchMessages) Call(ctx context.Context, conversationID model.ConversationID, cursor, limit int) (model.Messages, model.MessageID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, conversationID, cursor, limit)
	ret0, _ := ret[0].(model.Messages)
	ret1, _ := ret[1].(model.MessageID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Call indicates an expected call of Call.
func (mr *MockFetchMessagesMockRecorder) Call(ctx, conversationID, cursor, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockFetchMessages)(nil).Call), ctx, conversationID, cursor, limit)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: auth_middleware.go

// Package mock_middleware is a generated GoMock package.
package mock_middleware

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/syougo1209/b-match-server/domain/model"
)

// Mockjwter is a mock of jwter interface.
type Mockjwter struct {
	ctrl     *gomock.Controller
	recorder *MockjwterMockRecorder
}

// MockjwterMockRecorder is the mock recorder for Mockjwter.
type MockjwterMockRecorder struct {
	mock *Mockjwter
}

// NewMockjwter creates a new mock instance.
func NewMockjwter(ctrl *gomock.Controller) *Mockjwter {
	mock := &Mockjwter{ctrl: ctrl}
	mock.recorder = &MockjwterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockjwter) EXPECT() *MockjwterMockRecorder {
	return m.recorder
}

// CheckLoginState mocks base method.
func (m *Mockjwter) CheckLoginState(arg0 context.Context, arg1 *http.Request) (*model.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLoginState", arg0, arg1)
	ret0, _ := ret[0].(*model.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLoginState indicates an expected call of CheckLoginState.
func (mr *MockjwterMockRecorder) CheckLoginState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLoginState", reflect.TypeOf((*Mockjwter)(nil).CheckLoginState), arg0, arg1)
}

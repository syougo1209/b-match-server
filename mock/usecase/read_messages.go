// Code generated by MockGen. DO NOT EDIT.
// Source: read_messages.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/syougo1209/b-match-server/domain/model"
)

// MockReadMessages is a mock of ReadMessages interface.
type MockReadMessages struct {
	ctrl     *gomock.Controller
	recorder *MockReadMessagesMockRecorder
}

// MockReadMessagesMockRecorder is the mock recorder for MockReadMessages.
type MockReadMessagesMockRecorder struct {
	mock *MockReadMessages
}

// NewMockReadMessages creates a new mock instance.
func NewMockReadMessages(ctrl *gomock.Controller) *MockReadMessages {
	mock := &MockReadMessages{ctrl: ctrl}
	mock.recorder = &MockReadMessagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadMessages) EXPECT() *MockReadMessagesMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockReadMessages) Call(ctx context.Context, conversationID model.ConversationID, messageID model.MessageID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, conversationID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockReadMessagesMockRecorder) Call(ctx, conversationID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockReadMessages)(nil).Call), ctx, conversationID, messageID)
}

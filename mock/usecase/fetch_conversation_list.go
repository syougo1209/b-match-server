// Code generated by MockGen. DO NOT EDIT.
// Source: fetch_conversation_list.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/syougo1209/b-match-server/domain/model"
)

// MockFetchConversationList is a mock of FetchConversationList interface.
type MockFetchConversationList struct {
	ctrl     *gomock.Controller
	recorder *MockFetchConversationListMockRecorder
}

// MockFetchConversationListMockRecorder is the mock recorder for MockFetchConversationList.
type MockFetchConversationListMockRecorder struct {
	mock *MockFetchConversationList
}

// NewMockFetchConversationList creates a new mock instance.
func NewMockFetchConversationList(ctrl *gomock.Controller) *MockFetchConversationList {
	mock := &MockFetchConversationList{ctrl: ctrl}
	mock.recorder = &MockFetchConversationListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchConversationList) EXPECT() *MockFetchConversationListMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockFetchConversationList) Call(ctx context.Context, uid model.UserID) (model.Conversations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, uid)
	ret0, _ := ret[0].(model.Conversations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockFetchConversationListMockRecorder) Call(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockFetchConversationList)(nil).Call), ctx, uid)
}

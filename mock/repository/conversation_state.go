// Code generated by MockGen. DO NOT EDIT.
// Source: conversation_state_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/syougo1209/b-match-server/domain/model"
)

// MockConversationStateRepository is a mock of ConversationStateRepository interface.
type MockConversationStateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConversationStateRepositoryMockRecorder
}

// MockConversationStateRepositoryMockRecorder is the mock recorder for MockConversationStateRepository.
type MockConversationStateRepositoryMockRecorder struct {
	mock *MockConversationStateRepository
}

// NewMockConversationStateRepository creates a new mock instance.
func NewMockConversationStateRepository(ctrl *gomock.Controller) *MockConversationStateRepository {
	mock := &MockConversationStateRepository{ctrl: ctrl}
	mock.recorder = &MockConversationStateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversationStateRepository) EXPECT() *MockConversationStateRepositoryMockRecorder {
	return m.recorder
}

// ReadMessages mocks base method.
func (m *MockConversationStateRepository) ReadMessages(ctx context.Context, uid model.UserID, conversationID model.ConversationID, messageID model.MessageID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessages", ctx, uid, conversationID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadMessages indicates an expected call of ReadMessages.
func (mr *MockConversationStateRepositoryMockRecorder) ReadMessages(ctx, uid, conversationID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessages", reflect.TypeOf((*MockConversationStateRepository)(nil).ReadMessages), ctx, uid, conversationID, messageID)
}

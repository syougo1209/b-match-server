// Code generated by MockGen. DO NOT EDIT.
// Source: conversation_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/syougo1209/b-match-server/domain/model"
)

// MockConversationRepository is a mock of ConversationRepository interface.
type MockConversationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConversationRepositoryMockRecorder
}

// MockConversationRepositoryMockRecorder is the mock recorder for MockConversationRepository.
type MockConversationRepositoryMockRecorder struct {
	mock *MockConversationRepository
}

// NewMockConversationRepository creates a new mock instance.
func NewMockConversationRepository(ctrl *gomock.Controller) *MockConversationRepository {
	mock := &MockConversationRepository{ctrl: ctrl}
	mock.recorder = &MockConversationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversationRepository) EXPECT() *MockConversationRepositoryMockRecorder {
	return m.recorder
}

// UpdateLastMessageID mocks base method.
func (m *MockConversationRepository) UpdateLastMessageID(ctx context.Context, conversationID model.ConversationID, messageID model.MessageID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastMessageID", ctx, conversationID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastMessageID indicates an expected call of UpdateLastMessageID.
func (mr *MockConversationRepositoryMockRecorder) UpdateLastMessageID(ctx, conversationID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastMessageID", reflect.TypeOf((*MockConversationRepository)(nil).UpdateLastMessageID), ctx, conversationID, messageID)
}
